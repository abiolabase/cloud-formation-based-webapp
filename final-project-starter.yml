AWSTemplateFormatVersion: "2010-09-09"
Description: Creates the required network infrastructure for Public and Private routing with Internet access
Parameters:
  CPUPolicyTargetValue:
    Type: Number
    Default: 30
  MinCapacity:
    Type: String
    Default: "2"
  MaxCapacity:
    Type: String
    Default: "4"
  DesiredCapacity:
    Type: String
    Default: "2"
  AmiId:
    Type: String
    Default: "/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id"
  BucketName:
    Type: String
  EnvironmentName:
    Type: String
  VPCCIDR:
    Type: String
  PrivateSubnet1CIDR:
    Type: String
  PrivateSubnet2CIDR:
    Type: String
  PublicSubnet1CIDR:
    Type: String
  PublicSubnet2CIDR:
    Type: String
Resources:
  # instance profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
  WebVPC:
    Type: 'AWS::EC2::VPC'
    Properties: 
      CidrBlock: !Ref VPCCIDR
      Tags: 
        - Key: Name
          Value: "Web VPC"
  MyPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PublicSubnet1CIDR
      VpcId: !Ref WebVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MyPublicSubnet1
  MyPublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PublicSubnet2CIDR
      VpcId: !Ref WebVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MyPublicSubnet2
  MyPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      VpcId: !Ref WebVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: MyPrivateSubnet1
  MyPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnet2CIDR
      VpcId: !Ref WebVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: MyPrivateSubnet2
  MyInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway
  MyGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref WebVPC
      InternetGatewayId: !Ref MyInternetGateway
  MyPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WebVPC
      Tags:
        - Key: Name
          Value: MyPublicRouteTable
  MyPrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WebVPC
      Tags:
        - Key: Name
          Value: MyPrivateRouteTable1
  MyPrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WebVPC
      Tags:
        - Key: Name
          Value: MyPrivateRouteTable2
  MyPrivate1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivateSubnet1
      RouteTableId: !Ref MyPrivateRouteTable1
  MyPrivate2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivateSubnet2
      RouteTableId: !Ref MyPrivateRouteTable2
  MyPublic1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet1
      RouteTableId: !Ref MyPublicRouteTable
  MyPublic2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet2
      RouteTableId: !Ref MyPublicRouteTable
  MyPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: MyGatewayAttachment
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway
  MyNatGateway1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: "VPC"
  MyNatGateway2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: "VPC"
  MyNatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyNatGateway1EIP.AllocationId
      SubnetId: !Ref MyPrivateSubnet1
  MyNatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyNatGateway2EIP.AllocationId
      SubnetId: !Ref MyPrivateSubnet2
  MyPrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNatGateway1
  MyPrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNatGateway2

  JumpboxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref WebVPC
      GroupDescription: Allow SSH from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref WebVPC
      GroupDescription: Allow HTTP from anywhere, and HTTP to the Web Servers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref WebVPC
      GroupDescription: Allow SSH from JumpBox and HTTP from the ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref JumpboxSecurityGroup

  EC2S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3AccessPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${BucketName}/*"
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Sub "arn:aws:s3:::${BucketName}"
      Roles:
        - !Ref EC2S3AccessRole

  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2S3AccessRole

  WebServerASGLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AmiId
      InstanceType: t3.small
      KeyName: udacity
      InstanceMonitoring: true
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref WebServerInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 10
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          apt update -y
          apt install apache2 awscli -y
          systemctl start apache2.service
          systemctl enable apache2.service
          aws s3 sync s3://${BucketName} /var/www/html

  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    Properties:
      LaunchConfigurationName: !Ref WebServerASGLaunchConfiguration
      MaxSize: !Ref MaxCapacity
      MinSize: !Ref MinCapacity
      DesiredCapacity: !Ref DesiredCapacity

      VPCZoneIdentifier:
        - !Ref MyPrivateSubnet1
        - !Ref MyPrivateSubnet2

      TargetGroupARNs:
        - !Ref ELBTargetGroup # To be created later

  WebServerASGCPUScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUPolicyTargetValue

  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref WebVPC
      Port: 80
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  ELBLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${EnvironmentName}-ALB"
      Subnets:
        - !Ref MyPublicSubnet1
        - !Ref MyPublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup
      LoadBalancerArn: !Ref ELBLoadBalancer
      Port: 80
      Protocol: HTTP

  ELBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      ListenerArn: !Ref ELBListener
      Priority: 1

  Jumpbox1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref AmiId
      KeyName: udacity
      SecurityGroupIds:
        - !Ref JumpboxSecurityGroup
      SubnetId: !Ref MyPublicSubnet1
      Tags: 
        - Key: Name
          Value: !Sub "${EnvironmentName}-Jumpbox-1"
  
  Jumpbox2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref AmiId
      KeyName: udacity
      SecurityGroupIds:
        - !Ref JumpboxSecurityGroup
      SubnetId: !Ref MyPublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Jumpbox-2"


Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref WebVPC
    Export:
      Name: !Sub "${EnvironmentName}-VPC"

  PublicSubnet1:
    Description: Public Subnet 1 ID
    Value: !Ref MyPublicSubnet1
    Export:
      Name: !Sub "${EnvironmentName}-Public-Subnet-1"

  PublicSubnet2:
    Description: Public Subnet 2 ID
    Value: !Ref MyPublicSubnet2
    Export:
      Name: !Sub "${EnvironmentName}-Public-Subnet-2"

  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Value: !Ref MyPrivateSubnet1
    Export:
      Name: !Sub "${EnvironmentName}-Private-Subnet-1"

  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Value: !Ref MyPrivateSubnet2
    Export:
      Name: !Sub "${EnvironmentName}-Private-Subnet-2"

  Jumpbox1PublicHostname:
    Description: The Public IP Address of Jumpbox 1
    Value: !GetAtt Jumpbox1.PublicIp

  Jumpbox2PublicHostname:
    Description: The Public IP Address of Jumpbox 2
    Value: !GetAtt Jumpbox2.PublicIp

  LoadBalancerDNSName:
    Description: DNS Name of the web application
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt ELBLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-ELB-DNS-Name
 # ProfileWithRolesForOurApp:
 #  Type: AWS::IAM::InstanceProfile
 #   Properties: 
 #     Roles:
 #       - UdacityS3ReadOnlyEC2
#Outputs: 
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html